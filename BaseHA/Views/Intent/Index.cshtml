@using BaseHA.Application.ModelDto;
@using BaseHA.Domain.Entity;
@using BaseHA.Models.SearchModel;
@model IntentSearchModel

@{
    var setting = new AdminAreaSettings();
}
<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a data-action="create" href="javascript:void(0)" class="btn blue btn-sm"><i class="flaticon2-plus"></i> Thêm mới</a>
            <a data-action="edit" href="javascript:void(0)" class="btn yellow btn-sm"><i class="flaticon2-pen"></i> Chỉnh sửa</a>
            <a data-action="deletes" href="javascript:void(0)" class="btn red btn-sm"><i class="flaticon-delete"></i> Xoá</a>
            <button type="button" class="btn purple btn-sm dropdown-toggle" data-toggle="dropdown">
                <i class="flaticon-more"></i> Chức năng khác <i class="fa fa-angle-down"></i>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>
                    <a data-action="activate" href="javascript: void(0);"><i class="fa fa-check font-blue"></i> Kích hoạt</a>
                </li>
                <li>
                    <a data-action="deactivate" href="javascript: void(0);"><i class="fa fa-lock font-yellow"></i> Huỷ kích hoạt</a>
                </li>
            </ul>
        </div>
    </div>
</div>
<div class="splitter fixed-layout-split" data-position="230px">
    <div class="leftPane">
        <div id="treeWareHouse" class="full-height"></div>
    </div>
    <div class="rightPane">
        <div class="page-data">
            <div class="row search-form">
                <form style="
                            display: flex;
                            align-items: center;">
                    <div class="search-label">
                        Tìm kiếm:
                    </div>
                    <div class="col-md-4">
                        <div class="form-group form-group-sm">
                            <div class="input-icon right">
                                @Html.TextBoxFor(m => m.Keywords, new { @class = "form-control", placeholder = "" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="form-group form-group-sm">
                            <button type="submit" id="btnSearch" class="btn btn-default btn-sm">
                                <i class="fa fa-search"></i>Tìm
                            </button>
                        </div>
                    </div>
                   
                        <div style="display: flex;
                                align-items: center;">
                            <div class="search-label">
                                Tên kịch bản:
                            </div>
                                    <div id="selected">                                            
                                    </div>                              
                         </div>
                    
                </form>
            </div>
            
            <div class="row full-height">
                @(Html.Kendo().Grid<IntentCommands>()
                    .Name("grd")
                    .HtmlAttributes(new { style = "height: 100%" })
                    .Columns(columns =>
                    {
                        columns.Select().Width(30);
                        columns.Bound(x => x.Id).Width(300).Hidden();
                        columns.Bound(x => x.IntentVn).ClientTemplate("#=grd.tmp.name(IntentVn)#").Title("Ý định");
                        columns.Bound(x => x.Inactive).ClientTemplate("#=grd.tmp.activate(!Inactive)#").Title("Trạng thái");
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Create();
                        toolbar.Save();
                    })
                    .Events(e => e.BeforeEdit("master.addDefault"))
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(e => e.Sync("master.refresh"))
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.Id);                       
                        model.Field(p => p.CategoryId);
                        model.Field(p => p.IntentVn);
                        model.Field(p => p.Inactive);
                        
                    })
                    .PageSize(setting.GridPageSize)
                    .Read(read => read.Action("Get", "Intent").Data("grd.data"))
                    .Create(add => add.Action("Add", "Intent"))
                    .Update(update => update.Action("Edit", "Intent"))
                    .Destroy(destroy => destroy.Action("Delete", "Intent"))
                    )
                    .NoRecords()
                    .Scrollable(scr => scr.Enabled(true))
                    .Pageable(pageable => pageable.ButtonCount(setting.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(setting.GridPageSizeOptions).PreviousNext(true).Refresh(true))
                    .Selectable(selectable => selectable.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
                    .Navigatable())
            </div>
        </div>
    </div>
</div>
<ul id="mnu" style="display: none">
    <li data-action="details">
        <i class="flaticon-eye font-blue-dark"></i> Details
    </li>
    <li data-action="create">
        <i class="flaticon2-plus font-blue"></i> AddNew
    </li>
    <li data-action="edit">
        <i class="flaticon2-pen font-yellow"></i> Edit
    </li>
    <li data-action="activate">
        <i class="flaticon2-check-mark font-blue"></i> Activate
    </li>
    <li data-action="deactivate">
        <i class="flaticon-lock font-yellow"></i> Deactivate
    </li>
    <li class="k-separator"></li>
    <li data-action="refresh">
        <i class="flaticon-refresh font-green"></i>Refresh
    </li>
    <li data-action="deletes">
        <i class="flaticon-delete font-red"></i> Delete
    </li>
</ul>
<!-- #endregion -->
<!-- #region Scripts -->
@section HeadScripts {
    <script>
        // Fields
        var master = {
            urlTree: '@Url.Action("GetTree","Category")',
            urlDetails: '@Url.Action("Details")',
            urlCreate: '@Url.Action("Add")',
            urlEdit: '@Url.Action("Edit")',
            urlDeletes: '@Url.Action("Delete")',
            urlActivates: '@Url.Action("Activates")',
            urlExport: '@Url.Action("ExportOrder")',
            urlImportExcel: '@Url.Action("ImportExcel")',
            toolbar: {
                el: '.page-toolbar',
                $el: {},
                actions: {
                    init: function () { }
                },
                init: function () { }
            },
            grd: {
                el: '#grd',
                $el: {},
                api: {},
                actions: {
                    init: function () { }
                },
                tmp: {
                    name: function (id, name) { },
                    activate: function (activate) { }
                },
                data: function () { },
                init: function () { }
            },
            treeWareHouse: {
                el: '#treeWareHouse',
                $el: {},
                api: {},
                init: function () { },
            },
            mnu: {
                el: '#mnu',
                $el: {},
                api: {},
                init: function () { }
            },
            btnSearch: {
                el: '#btnSearch',
                $el: {},
                init: function () { }
            },
           
            init: function () { },
            details: function (id) { },
            create: function () { },
            edit: function (id) { },
            deletes: function () { },
            activates: function (activate, ids) { },
            refresh: function () { },
           // refreshData: function () { },
            addDefault: function () { },
            actionCallback: function () { },
            importExcel: function () { },
            export: function () { }
        };
        var toolbar = master.toolbar;
        var grd = master.grd;
        var mnu = master.mnu;
        var btnSearch = master.btnSearch;
        var treeWareHouse = master.treeWareHouse;
       

        grd.data = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var $status = $('#@Html.FieldIdFor(m => m.ActiveStatus)');
            

            var CategoryId = null;
            if (!_.isEmpty(treeWareHouse.api) && treeWareHouse.api.getActiveNode())
                CategoryId = treeWareHouse.api.activeNode.key;
            var searchModel = {
                Keywords: $keywords.val(),
                Status: $status.val(),
                CategoryId: CategoryId
            };
            return searchModel;
        };
    </script>
}


@section Scripts {
    <script>
        // Methods


        master.details = function () {
            var id = grd.api.selectedIds()[0];
            if (id) {
                app.window.form.open({ url: `${master.urlDetails}/${id}`, options: { width: '450px' } });
            } else {
                notify({ text: 'Bạn chưa chọn bảng ghi nào !', type: 'info' });
            }
        };
        master.importExcel = function () {
            app.window.form.open({ url: `${master.urlImportExcel}`, options: { width: '620px' } });
        };
        master.create = function () {
            
            var CategoryId = null;
            if (!_.isEmpty(treeWareHouse.api) && treeWareHouse.api.getActiveNode())
                CategoryId = treeWareHouse.api.activeNode.key;
            if (CategoryId === null || CategoryId.length < 1) {
                notify({ text: 'Bạn chưa chọn loại kịch bản!', type: 'info' });
                return;
            }
            else
        app.window.form.open({ url: master.urlCreate + "?CategoryId=" + CategoryId, options: { width: '550px' }, callback: master.actionCallback });                   
        };

        master.edit = function () {
            var id = grd.api.selectedIds()[0];
            console.log(id)
            if (id) {
                app.window.form.open({ url: `${master.urlEdit}/${id}`, options: { width: '550px' }, callback: master.actionCallback });
            } else {
                notify({ text: 'Bạn chưa chọn bảng ghi nào !', type: 'info' });
            }
        };
        master.deletes = function () {
            var ids = grd.api.selectedIds();
            if (ids.length > 0) {
                app.window.deletes.open({ url: master.urlDeletes, ids: ids, options: { width: '450px' }, callback: master.actionCallback });
            } else {
                notify({ text: 'Bạn chưa chọn bảng ghi nào !', type: 'info' });
            }
        };
        master.activates = function (activate, ids) {
            ids = ids || grd.api.selectedIds();
            if (ids.length > 0) {
                $.ajax({
                    type: 'POST',
                    data: { Ids: ids, Active: activate, __RequestVerificationToken: app.form.antiForgeryToken.value },
                    dataType: 'json',
                    url: master.urlActivates,
                    beforeSend: function (jqXhr, settings) {
                        app.ui.loader(grd.api.element, true);
                    },
                    success: function (msg) {
                        if (!msg)
                            return;
                        if (!msg.HasError) {
                            master.actionCallback();
                        }
                        if (msg && msg.message)
                            notify({ text: msg.message, type: msg.success ? 'success' : 'info' });
                        app.ui.loader(grd.api.element, false);
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        app.ui.loader(grd.api.element, false);
                    }
                });
            } else {
                notify({ text: 'Bạn chưa chọn bảng ghi nào !', type: 'info' });
            }
        };

        master.addDefault = function(data){
                 
            if (data.model.CategoryId == "" || data.model.CategoryId == null) {
                data.model.CategoryId = treeWareHouse.api.activeNode.key;
            }
        }
        
        // master.refreshData = function(data){
        //     console.log("reload data:",data)
        // }

        master.refresh = function (data) {
           grd.api.reload();
        };
        master.actionCallback = function () {
            grd.api.reload();
        };
        master.export = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var $status = $('#@Html.FieldIdFor(m => m.ActiveStatus)');

            var searchModel = {
                Keywords: $keywords.val(),
                Status: $status.val(),
                PageIndex: grd.api.dataSource.page(),
                PageSize: grd.api.dataSource.pageSize(),
            };
            $.ajax({
                url: '@Url.Action("GetExcelReport")',
                data: searchModel,
                success: function (data) {
                    window.location = '@Url.Action("DownloadExcel")' + '?fileGuid=' + data.FileGuid
                        + '&fileName=' + data.FileName;
                }
            });
        };
        // Inits
        master.init = function () {
            toolbar.init();
            grd.init();
            mnu.init();
            btnSearch.init();
            treeWareHouse.init();
            
        };

        toolbar.init = function () {
            toolbar.$el = $(toolbar.el);

            toolbar.actions.init();
        };
        toolbar.actions.init = function () {
            var $toolbar = toolbar.$el;
            // $toolbar.find('a[data-action="edit"]').click(function (e) {
            //     master.edit();
            // });

            $toolbar.find('a[data-action="export"]').click(function (e) {
                master.export();
            });
            $toolbar.find('a[data-action="importexcel"]').click(function (e) {
                master.importExcel();
            });
            admin.pageToolbar.actions.initCreate($toolbar, master.create);
            admin.pageToolbar.actions.initEdit($toolbar, master.edit);
            admin.pageToolbar.actions.initDeletes($toolbar, master.deletes);
            admin.pageToolbar.actions.initActivate($toolbar, master.activates);
        };
        grd.init = function () {
            grd.$el = $(grd.el);
            grd.api = grd.$el.data('kendoGrid');

            grd.actions.init();
        };
        grd.actions.init = function () {
            grd.api.initDblClick(master.details);
            grd.api.initEdit(master.edit);
            grd.api.initActivate(master.activates);
        };

        treeWareHouse.init = function () {
            treeWareHouse.$el = $(treeWareHouse.el);
            treeWareHouse.$el.fancytree({
                source: {
                    url: master.urlTree,
                    beforeSend: function (jqXHR, settings) {
                        grd.api.clear();
                    },
                    complete: function () {
                        var lastKeySelected = '@Model.CategoryId';
                        $("#treeWareHouse").fancytree("getTree").getNodeByKey(lastKeySelected).setActive();
                    }
                },
                postProcess: function (event, data) {
                    data.result = data.response.data;
                },
                activate: function (event, data) {
                    $('#@Html.FieldIdFor(m => m.Keywords)').val("")
                    var node = data.node;

                    $("#selected").text(node.title);

                    if (node.statusNodeType !== 'loading') {
                        grd.api.resetPage();
                    }
                }
            });
            treeWareHouse.api = treeWareHouse.$el.fancytree("getTree");
        };
        mnu.init = function () {
            mnu.$el = $(mnu.el);
            mnu.$el.kendoContextMenu({
                orientation: 'vertical',
                target: master.grd.el,
                filter: 'tbody tr[role="row"]',
                animation: {
                    open: { effects: "fadeIn" },
                    duration: 0
                },
                open: function (e) {
                    var $row = $(e.target);
                    var selected = master.grd.api.select().length;
                    if (selected === 0 || (!$row.hasClass('k-state-selected') && selected > 0)) {
                        master.grd.api.clearSelection();
                        master.grd.api.select($row);
                    }
                },
                select: function (e) {
                    var action = $(e.item).attr('data-action');
                    switch (action) {
                        case 'details':
                            master.details();
                            break;
                        case 'create':
                            master.create();
                            break;
                        case 'importExcel':
                            master.importExcel();
                            break;
                        case 'edit':
                            master.edit();
                            break;
                        case 'activate':
                            master.activates(true);
                            break;
                        case 'deactivate':
                            master.activates(false);
                            break;
                        case 'deletes':
                            master.deletes();
                            break;
                        case 'refresh':
                            master.refresh();
                            break;
                        case 'export':
                            master.export();
                            break;
                        default:
                            break;
                    }
                }
            });
            mnu.api = mnu.$el.data("kendoContextMenu");
        };
        btnSearch.init = function () {
            btnSearch.$el = $(btnSearch.el);

            const search = _.debounce(() => {
                grd.api.resetPage();
            }, app.ui.def.debounce.timeout);
            btnSearch.$el.click(function (e) {
                search();
                return false;
            });
        };

        // Templates
        grd.tmp.name = function (name) {
            return `<a data-action="edit" href="javascript:void(0)">${name}</a>`;
        };
        grd.tmp.activate = function (activate) {
            return !activate ? '<i data-action="deactivate" class="fa fa-check green pointer"></i>' : '<i data-action="activate" class="fa fa-lock yellow pointer"></i>';
        };

        // Startup
        $(function () {
            master.init();
        });
    </script>
}
<!-- #endregion -->