// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using BaseHA.Domain.Entity;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore.Diagnostics;

namespace BaseHA.Domain.ContextSub
{
    public partial class WarehouseManagementContext : DbContext
    {
        public WarehouseManagementContext()
        {
        }

        public WarehouseManagementContext(DbContextOptions<WarehouseManagementContext> options)
            : base(options)
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    => optionsBuilder.LogTo(Console.WriteLine, LogLevel.Information, DbContextLoggerOptions.UtcTime).EnableSensitiveDataLogging();
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AuditCouncil> AuditCouncil { get; set; }
        public virtual DbSet<AuditDetail> AuditDetail { get; set; }
        public virtual DbSet<AuditDetailSerial> AuditDetailSerial { get; set; }
        public virtual DbSet<BeginningWareHouse> BeginningWareHouse { get; set; }
        public virtual DbSet<Inward> Inward { get; set; }
        public virtual DbSet<InwardDetail> InwardDetail { get; set; }
        public virtual DbSet<Outward> Outward { get; set; }
        public virtual DbSet<OutwardDetail> OutwardDetail { get; set; }
        public virtual DbSet<SerialWareHouse> SerialWareHouse { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<WareHouse> WareHouse { get; set; }
        public virtual DbSet<WareHouseItem> WareHouseItem { get; set; }
        public virtual DbSet<WareHouseItemCategory> WareHouseItemCategory { get; set; }
        public virtual DbSet<WareHouseItemUnit> WareHouseItemUnit { get; set; }
        public virtual DbSet<WareHouseLimit> WareHouseLimit { get; set; }
        public virtual DbSet<WarehouseBalance> WarehouseBalance { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Audit>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.VoucherCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VoucherDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.WareHouseId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.Audit)
                    .HasForeignKey(d => d.WareHouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Audits_PK_WareHouse");
            });

            modelBuilder.Entity<AuditCouncil>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuditId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Audit)
                    .WithMany(p => p.AuditCouncil)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditCouncils_PK_Audit");
            });

            modelBuilder.Entity<AuditDetail>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuditId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuditQuantity).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Conclude)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 2)");

                entity.HasOne(d => d.Audit)
                    .WithMany(p => p.AuditDetail)
                    .HasForeignKey(d => d.AuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditDetails_PK_Audit");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AuditDetail)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_AuditDetails_PK_WareHouseItem");
            });

            modelBuilder.Entity<AuditDetailSerial>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuditDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.AuditDetail)
                    .WithMany(p => p.AuditDetailSerial)
                    .HasForeignKey(d => d.AuditDetailId)
                    .HasConstraintName("FK_AuditDetailSerials_PK_AuditDetail");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AuditDetailSerial)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditDetailSerials_PK_WareHouseItem");
            });

            modelBuilder.Entity<BeginningWareHouse>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitName).HasMaxLength(255);

                entity.Property(e => e.WareHouseId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BeginningWareHouse)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BeginningWareHouses_PK_WareHouseItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.BeginningWareHouse)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BeginningWareHouses_PK_Unit");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.BeginningWareHouse)
                    .HasForeignKey(d => d.WareHouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BeginningWareHouses_PK_WareHouse");
            });

            modelBuilder.Entity<Inward>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Deliver).HasMaxLength(255);

                entity.Property(e => e.DeliverAddress).HasMaxLength(50);

                entity.Property(e => e.DeliverDepartment).HasMaxLength(50);

                entity.Property(e => e.DeliverPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.ReasonDescription).HasMaxLength(255);

                entity.Property(e => e.Receiver).HasMaxLength(255);

                entity.Property(e => e.ReceiverAddress).HasMaxLength(50);

                entity.Property(e => e.ReceiverDepartment).HasMaxLength(50);

                entity.Property(e => e.ReceiverPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Voucher)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.WareHouseId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WareHouseID")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Inward)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_WareHouseInwards_PK_Vendor");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.Inward)
                    .HasForeignKey(d => d.WareHouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WareHouseInwards_PK_WareHouse");
            });

            modelBuilder.Entity<InwardDetail>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountMore)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountYes)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.DepartmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(255);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName).HasMaxLength(255);

                entity.Property(e => e.InwardId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(255);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.StationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StationName).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Uiprice)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("UIPrice")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.Uiquantity)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("UIQuantity");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Inward)
                    .WithMany(p => p.InwardDetail)
                    .HasForeignKey(d => d.InwardId)
                    .HasConstraintName("FK_InwardDetails_PK_Inward");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.InwardDetail)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InwardDetails_PK_WareHouseItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.InwardDetail)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InwardDetails_PK_Unit");
            });

            modelBuilder.Entity<Outward>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Deliver).HasMaxLength(255);

                entity.Property(e => e.DeliverAddress).HasMaxLength(50);

                entity.Property(e => e.DeliverDepartment).HasMaxLength(50);

                entity.Property(e => e.DeliverPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.ReasonDescription).HasMaxLength(255);

                entity.Property(e => e.Receiver).HasMaxLength(255);

                entity.Property(e => e.ReceiverAddress).HasMaxLength(50);

                entity.Property(e => e.ReceiverDepartment).HasMaxLength(50);

                entity.Property(e => e.ReceiverPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToWareHouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Voucher)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.WareHouseId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("WareHouseID")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.ToWareHouse)
                    .WithMany(p => p.OutwardToWareHouse)
                    .HasForeignKey(d => d.ToWareHouseId)
                    .HasConstraintName("FK_ToWareHouse_Outwards_PK_ToWareHouse");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.OutwardWareHouse)
                    .HasForeignKey(d => d.WareHouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Warehouse_Outwards_PK_WareHouse");
            });

            modelBuilder.Entity<OutwardDetail>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountMore).HasMaxLength(255);

                entity.Property(e => e.AccountYes).HasMaxLength(255);

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.DepartmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(255);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName).HasMaxLength(255);

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutwardId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(255);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.StationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StationName).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Uiprice)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("UIPrice")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.Uiquantity)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("UIQuantity");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OutwardDetail)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OutwardDetails_PK_WareHouseItem");

                entity.HasOne(d => d.Outward)
                    .WithMany(p => p.OutwardDetail)
                    .HasForeignKey(d => d.OutwardId)
                    .HasConstraintName("FK_OutwardDetails_PK_Outward");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.OutwardDetail)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OutwardDetails_PK_Unit");
            });

            modelBuilder.Entity<SerialWareHouse>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InwardDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutwardDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.InwardDetail)
                    .WithMany(p => p.SerialWareHouse)
                    .HasForeignKey(d => d.InwardDetailId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SerialWareHouses_PK_InwardDetail");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SerialWareHouse)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SerialWareHouses_PK_WareHouseItem");

                entity.HasOne(d => d.OutwardDetail)
                    .WithMany(p => p.SerialWareHouse)
                    .HasForeignKey(d => d.OutwardDetailId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SerialWareHouses_PK_OutwardDetail");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitName).HasMaxLength(255);
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WareHouse>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WareHouseItem>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Inactive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VendorId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.WareHouseItem)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_WareHouseItems_PK_WareHouseItemCategory");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.WareHouseItem)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WareHouseItems_PK_Unit");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.WareHouseItem)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_WareHouseItems_PK_Vendor");
            });

            modelBuilder.Entity<WareHouseItemCategory>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Inactive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_WareHouseItemCategories_PK_Parent");
            });

            modelBuilder.Entity<WareHouseItemUnit>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsPrimary)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.WareHouseItemUnit)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_WareHouseItemUnits_PK_WareHouseItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.WareHouseItemUnit)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WareHouseItemUnits_PK_Unit");
            });

            modelBuilder.Entity<WareHouseLimit>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WareHouseId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.WareHouseLimit)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WareHouseLimits_PK_WareHouseItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.WareHouseLimit)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WareHouseLimits_PK_Unit");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.WareHouseLimit)
                    .HasForeignKey(d => d.WareHouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WareHouseLimits_PK_WareHouse");
            });

            modelBuilder.Entity<WarehouseBalance>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.WarehouseId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}